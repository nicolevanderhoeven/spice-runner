---
# Namespace for observability stack (optional)
apiVersion: v1
kind: Namespace
metadata:
  name: observability
---
# Prometheus PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage
  namespace: observability
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
# Prometheus ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: observability
---
# Prometheus ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - nodes/metrics
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["get"]
- nonResourceURLs:
  - /metrics
  - /metrics/cadvisor
  verbs: ["get"]
---
# Prometheus ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: observability
---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: observability
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      securityContext:
        fsGroup: 65534
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus'
          - '--web.enable-remote-write-receiver'
          - '--enable-feature=native-histograms'
          - '--web.console.libraries=/usr/share/prometheus/console_libraries'
          - '--web.console.templates=/usr/share/prometheus/consoles'
        ports:
        - containerPort: 9090
          name: http
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
        - name: storage
          mountPath: /prometheus
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
      volumes:
      - name: config
        configMap:
          name: prometheus-config
      - name: storage
        persistentVolumeClaim:
          claimName: prometheus-storage
---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: observability
  labels:
    app: prometheus
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
    name: http
  selector:
    app: prometheus
---
# Prometheus ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: observability
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      
      - job_name: 'alloy'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - default
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_app]
            regex: spice-runner
            action: keep
          - source_labels: [__meta_kubernetes_pod_container_name]
            regex: alloy
            action: keep
          - source_labels: [__meta_kubernetes_pod_ip]
            target_label: __address__
            replacement: ${1}:12345
      
      - job_name: 'kube-state-metrics'
        static_configs:
          - targets: ['kube-state-metrics.kube-system.svc.cluster.local:8080']
      
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
      
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
      
      - job_name: 'kubernetes-cadvisor'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
          - source_labels: [__meta_kubernetes_node_name]
            action: replace
            target_label: node
---
# kube-state-metrics Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-state-metrics
  namespace: kube-system
  labels:
    app: kube-state-metrics
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kube-state-metrics
  template:
    metadata:
      labels:
        app: kube-state-metrics
    spec:
      serviceAccountName: kube-state-metrics
      containers:
      - name: kube-state-metrics
        image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.10.1
        ports:
        - name: http-metrics
          containerPort: 8080
        - name: telemetry
          containerPort: 8081
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 8081
          initialDelaySeconds: 5
          timeoutSeconds: 5
        resources:
          requests:
            cpu: 10m
            memory: 32Mi
          limits:
            cpu: 100m
            memory: 128Mi
---
# kube-state-metrics Service
apiVersion: v1
kind: Service
metadata:
  name: kube-state-metrics
  namespace: kube-system
  labels:
    app: kube-state-metrics
spec:
  type: ClusterIP
  ports:
  - name: http-metrics
    port: 8080
    targetPort: http-metrics
  - name: telemetry
    port: 8081
    targetPort: telemetry
  selector:
    app: kube-state-metrics
---
# kube-state-metrics ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-state-metrics
  namespace: kube-system
---
# kube-state-metrics ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kube-state-metrics
rules:
- apiGroups: [""]
  resources:
  - configmaps
  - secrets
  - nodes
  - pods
  - services
  - resourcequotas
  - replicationcontrollers
  - limitranges
  - persistentvolumeclaims
  - persistentvolumes
  - namespaces
  - endpoints
  verbs: ["list", "watch"]
- apiGroups: ["apps"]
  resources:
  - statefulsets
  - daemonsets
  - deployments
  - replicasets
  verbs: ["list", "watch"]
- apiGroups: ["batch"]
  resources:
  - cronjobs
  - jobs
  verbs: ["list", "watch"]
- apiGroups: ["autoscaling"]
  resources:
  - horizontalpodautoscalers
  verbs: ["list", "watch"]
- apiGroups: ["policy"]
  resources:
  - poddisruptionbudgets
  verbs: ["list", "watch"]
- apiGroups: ["storage.k8s.io"]
  resources:
  - storageclasses
  - volumeattachments
  verbs: ["list", "watch"]
---
# kube-state-metrics ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-state-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-state-metrics
subjects:
- kind: ServiceAccount
  name: kube-state-metrics
  namespace: kube-system
---
# Loki PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: loki-storage
  namespace: observability
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Loki Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
  namespace: observability
  labels:
    app: loki
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
    spec:
      securityContext:
        fsGroup: 10001
      containers:
      - name: loki
        image: grafana/loki:latest
        args:
          - -config.file=/etc/loki/loki.yaml
        ports:
        - containerPort: 3100
          name: http
        volumeMounts:
        - name: config
          mountPath: /etc/loki
        - name: storage
          mountPath: /loki
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
      volumes:
      - name: config
        configMap:
          name: loki-config
      - name: storage
        persistentVolumeClaim:
          claimName: loki-storage
---
# Loki Service
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: observability
  labels:
    app: loki
spec:
  type: ClusterIP
  ports:
  - port: 3100
    targetPort: 3100
    name: http
  selector:
    app: loki
---
# Loki ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
  namespace: observability
data:
  loki.yaml: |
    auth_enabled: false

    server:
      http_listen_port: 3100

    common:
      path_prefix: /loki
      storage:
        filesystem:
          chunks_directory: /loki/chunks
          rules_directory: /loki/rules
      replication_factor: 1
      ring:
        instance_addr: 127.0.0.1
        kvstore:
          store: inmemory
    
    pattern_ingester:
      enabled: false

    schema_config:
      configs:
        - from: 2024-04-01
          store: tsdb
          object_store: filesystem
          schema: v13
          index:
            prefix: index_
            period: 24h

    ruler:
      alertmanager_url: http://localhost:9093

    limits_config:
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      ingestion_rate_mb: 10
      ingestion_burst_size_mb: 20
      allow_structured_metadata: true
      volume_enabled: true
---
# Tempo PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tempo-storage
  namespace: observability
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Tempo Deployment (Optional - for traces)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tempo
  namespace: observability
  labels:
    app: tempo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tempo
  template:
    metadata:
      labels:
        app: tempo
    spec:
      securityContext:
        fsGroup: 10001
      containers:
      - name: tempo
        image: grafana/tempo:latest
        args:
          - -config.file=/etc/tempo/tempo.yaml
        ports:
        - containerPort: 3200
          name: http
        - containerPort: 4317
          name: otlp-grpc
        - containerPort: 4318
          name: otlp-http
        volumeMounts:
        - name: config
          mountPath: /etc/tempo
        - name: storage
          mountPath: /tmp/tempo
        resources:
          requests:
            cpu: 50m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
      volumes:
      - name: config
        configMap:
          name: tempo-config
      - name: storage
        persistentVolumeClaim:
          claimName: tempo-storage
---
# Tempo Service
apiVersion: v1
kind: Service
metadata:
  name: tempo
  namespace: observability
  labels:
    app: tempo
spec:
  type: ClusterIP
  ports:
  - port: 3200
    targetPort: 3200
    name: http
  - port: 4317
    targetPort: 4317
    name: otlp-grpc
  - port: 4318
    targetPort: 4318
    name: otlp-http
  selector:
    app: tempo
---
# Tempo ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: tempo-config
  namespace: observability
data:
  tempo.yaml: |
    server:
      http_listen_port: 3200

    distributor:
      receivers:
        otlp:
          protocols:
            http:
              endpoint: 0.0.0.0:4318
            grpc:
              endpoint: 0.0.0.0:4317

    storage:
      trace:
        backend: local
        local:
          path: /tmp/tempo/traces

    querier:
      frontend_worker:
        frontend_address: tempo:9095
---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: observability
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "true"
        - name: GF_AUTH_ANONYMOUS_ORG_ROLE
          value: "Admin"
        - name: GF_AUTH_DISABLE_LOGIN_FORM
          value: "true"
        - name: GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH
          value: "/var/lib/grafana/dashboards/spice-runner-dashboard.json"
        volumeMounts:
        - name: datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards
        - name: dashboards
          mountPath: /var/lib/grafana/dashboards
        - name: kubernetes-dashboard
          mountPath: /var/lib/grafana/dashboards-k8s
        - name: storage
          mountPath: /var/lib/grafana
        resources:
          requests:
            cpu: 50m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
      volumes:
      - name: datasources
        configMap:
          name: grafana-datasources
      - name: dashboards-config
        configMap:
          name: grafana-dashboards-config
      - name: dashboards
        configMap:
          name: grafana-dashboards
      - name: kubernetes-dashboard
        configMap:
          name: grafana-kubernetes-dashboard
      - name: storage
        emptyDir: {}
---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: observability
  labels:
    app: grafana
spec:
  type: LoadBalancer  # Change to NodePort or ClusterIP if you prefer
  ports:
  - port: 3000
    targetPort: 3000
    name: http
  selector:
    app: grafana
---
# Grafana Datasources ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: observability
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        uid: prometheus
        access: proxy
        url: http://prometheus.observability.svc.cluster.local:9090
        isDefault: true
        editable: true
        jsonData:
          timeInterval: "5s"

      - name: Loki
        type: loki
        uid: loki
        access: proxy
        url: http://loki.observability.svc.cluster.local:3100
        editable: true
        jsonData:
          maxLines: 1000

      - name: Tempo
        uid: tempo
        type: tempo
        access: proxy
        url: http://tempo.observability.svc.cluster.local:3200
        editable: true
        jsonData:
          tracesToLogs:
            datasourceUid: 'loki'
          serviceMap:
            datasourceUid: 'prometheus'
---
# Grafana Dashboards Config
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: observability
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: 'Application Dashboards'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards
      - name: 'Infrastructure Dashboards'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards-k8s
---
# Grafana Dashboards ConfigMap with actual dashboard JSON
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: observability
data:
  spice-runner-dashboard.json: |
    {
      "title": "Spice Runner App Stats",
      "uid": "spice-runner-observability",
      "tags": ["spice-runner", "alloy", "nginx"],
      "timezone": "browser",
      "refresh": "10s",
      "time": {
        "from": "now-1h",
        "to": "now"
      },
      "panels": [
        {
          "id": 1,
          "title": "Nginx Access Logs (Last 50)",
          "type": "logs",
          "datasource": {"type": "loki", "uid": "loki"},
          "gridPos": {"h": 8, "w": 24, "x": 0, "y": 0},
          "targets": [
            {
              "expr": "{job=\"nginx\", log_type=\"access\"} | json",
              "refId": "A"
            }
          ],
          "options": {
            "showTime": true,
            "showLabels": false,
            "showCommonLabels": false,
            "wrapLogMessage": false,
            "prettifyLogMessage": false,
            "enableLogDetails": true,
            "dedupStrategy": "none",
            "sortOrder": "Descending"
          }
        },
        {
          "id": 2,
          "title": "HTTP Status Codes",
          "type": "timeseries",
          "datasource": {"type": "loki", "uid": "loki"},
          "gridPos": {"h": 6, "w": 12, "x": 0, "y": 8},
          "targets": [
            {
              "expr": "sum by (status) (count_over_time({job=\"nginx\", log_type=\"access\"} | json [5m]))",
              "refId": "A",
              "legendFormat": "Status {{status}}"
            }
          ],
          "fieldConfig": {
            "defaults": {
              "color": {"mode": "palette-classic"},
              "custom": {
                "drawStyle": "line",
                "lineInterpolation": "smooth",
                "fillOpacity": 20,
                "stacking": {"mode": "normal"}
              },
              "unit": "short"
            }
          }
        },
        {
          "id": 3,
          "title": "Request Rate",
          "type": "timeseries",
          "datasource": {"type": "loki", "uid": "loki"},
          "gridPos": {"h": 6, "w": 12, "x": 12, "y": 8},
          "targets": [
            {
              "expr": "sum(rate({job=\"nginx\", log_type=\"access\"} | json [1m]))",
              "refId": "A",
              "legendFormat": "Requests/sec"
            }
          ],
          "fieldConfig": {
            "defaults": {
              "color": {"mode": "palette-classic"},
              "custom": {
                "drawStyle": "line",
                "lineInterpolation": "smooth",
                "fillOpacity": 20
              },
              "unit": "reqps"
            }
          }
        },
        {
          "id": 8,
          "title": "🎮 Total Jumps",
          "type": "stat",
          "datasource": {"type": "loki", "uid": "loki"},
          "gridPos": {"h": 4, "w": 6, "x": 0, "y": 24},
          "targets": [
            {
              "expr": "sum(count_over_time({job=\"faro\"} | logfmt | kind=\"event\" | event_name=\"player_jump\" [$__range]))",
              "refId": "A"
            }
          ],
          "options": {
            "graphMode": "area",
            "colorMode": "value",
            "textMode": "value_and_name"
          },
          "fieldConfig": {
            "defaults": {
              "color": {"mode": "palette-classic"},
              "unit": "short"
            }
          }
        },
        {
          "id": 9,
          "title": "💥 Total Collisions",
          "type": "stat",
          "datasource": {"type": "loki", "uid": "loki"},
          "gridPos": {"h": 4, "w": 6, "x": 6, "y": 24},
          "targets": [
            {
              "expr": "sum(count_over_time({job=\"faro\"} | logfmt | kind=\"event\" | event_name=\"game_collision\" [$__range]))",
              "refId": "A"
            }
          ],
          "options": {
            "graphMode": "area",
            "colorMode": "value",
            "textMode": "value_and_name"
          },
          "fieldConfig": {
            "defaults": {
              "color": {"mode": "thresholds"},
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {"value": 0, "color": "green"},
                  {"value": 10, "color": "yellow"},
                  {"value": 50, "color": "red"}
                ]
              },
              "unit": "short"
            }
          }
        },
        {
          "id": 10,
          "title": "🏆 Game Sessions",
          "type": "stat",
          "datasource": {"type": "loki", "uid": "loki"},
          "gridPos": {"h": 4, "w": 6, "x": 12, "y": 24},
          "targets": [
            {
              "expr": "sum(count_over_time({job=\"faro\"} | logfmt | kind=\"event\" | event_name=\"game_loaded\" [$__range]))",
              "refId": "A"
            }
          ],
          "options": {
            "graphMode": "area",
            "colorMode": "value",
            "textMode": "value_and_name"
          },
          "fieldConfig": {
            "defaults": {
              "color": {"mode": "palette-classic"},
              "unit": "short"
            }
          }
        },
        {
          "id": 11,
          "title": "⭐ High Score",
          "type": "stat",
          "datasource": {"type": "loki", "uid": "loki"},
          "gridPos": {"h": 4, "w": 6, "x": 18, "y": 24},
          "targets": [
            {
              "expr": "max(max_over_time({job=\"faro\"} | logfmt | kind=\"event\" | event_name=\"game_over\" | event_data_sessionId!=\"null\" | unwrap event_data_finalScore [$__range]))",
              "refId": "A"
            }
          ],
          "options": {
            "graphMode": "area",
            "colorMode": "value",
            "textMode": "value_and_name"
          },
          "fieldConfig": {
            "defaults": {
              "color": {"mode": "thresholds"},
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {"value": 0, "color": "blue"},
                  {"value": 100, "color": "green"},
                  {"value": 500, "color": "yellow"},
                  {"value": 1000, "color": "orange"},
                  {"value": 5000, "color": "red"}
                ]
              },
              "unit": "none",
              "decimals": 0
            }
          }
        },
        {
          "id": 12,
          "title": "📊 Jumps Over Time",
          "type": "timeseries",
          "datasource": {"type": "loki", "uid": "loki"},
          "gridPos": {"h": 8, "w": 12, "x": 0, "y": 28},
          "targets": [
            {
              "expr": "sum(count_over_time({job=\"faro\"} | logfmt | kind=\"event\" | event_name=\"player_jump\" [5m]))",
              "refId": "A",
              "legendFormat": "Jumps per 5min"
            }
          ],
          "fieldConfig": {
            "defaults": {
              "color": {"mode": "palette-classic"},
              "custom": {
                "drawStyle": "line",
                "lineInterpolation": "smooth",
                "fillOpacity": 20
              },
              "unit": "short"
            }
          }
        },
        {
          "id": 13,
          "title": "💥 Collisions Over Time",
          "type": "timeseries",
          "datasource": {"type": "loki", "uid": "loki"},
          "gridPos": {"h": 8, "w": 12, "x": 12, "y": 28},
          "targets": [
            {
              "expr": "sum(count_over_time({job=\"faro\"} | logfmt | kind=\"event\" | event_name=\"game_collision\" [5m]))",
              "refId": "A",
              "legendFormat": "Collisions per 5min"
            }
          ],
          "fieldConfig": {
            "defaults": {
              "color": {"mode": "palette-classic"},
              "custom": {
                "drawStyle": "line",
                "lineInterpolation": "smooth",
                "fillOpacity": 20
              },
              "unit": "short"
            }
          }
        },
        {
          "id": 14,
          "title": "🎯 Recent Game Events",
          "type": "logs",
          "datasource": {"type": "loki", "uid": "loki"},
          "gridPos": {"h": 10, "w": 24, "x": 0, "y": 36},
          "targets": [
            {
              "expr": "{job=\"faro\"} | logfmt | kind=\"event\" | event_name=~\"game_start|player_jump|game_collision|game_over|high_score\"",
              "refId": "A"
            }
          ],
          "options": {
            "showTime": true,
            "showLabels": true,
            "showCommonLabels": false,
            "wrapLogMessage": false,
            "prettifyLogMessage": true,
            "enableLogDetails": true,
            "dedupStrategy": "none",
            "sortOrder": "Descending"
          }
        },
        {
          "id": 15,
          "title": "Error Logs",
          "type": "logs",
          "datasource": {"type": "loki", "uid": "loki"},
          "gridPos": {"h": 8, "w": 24, "x": 0, "y": 46},
          "targets": [
            {
              "expr": "{job=\"nginx\", log_type=\"access\"} | json | status >= 400",
              "refId": "A"
            }
          ],
          "options": {
            "showTime": true,
            "showLabels": true,
            "wrapLogMessage": false
          }
        }
      ]
    }
---
# Grafana Kubernetes Dashboard ConfigMap (Separate for isolation from app changes)
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-kubernetes-dashboard
  namespace: observability
  labels:
    app: grafana
    dashboard: kubernetes
data:
  kubernetes-cluster-dashboard.json: |
    {
      "title": "Kubernetes Cluster Monitoring",
      "uid": "kubernetes-cluster-monitoring",
      "tags": ["kubernetes", "cluster", "monitoring"],
      "timezone": "browser",
      "refresh": "30s",
      "time": {
        "from": "now-1h",
        "to": "now"
      },
      "panels": [
        {
          "id": 1,
          "title": "Cluster Nodes",
          "type": "stat",
          "datasource": {"type": "prometheus", "uid": "prometheus"},
          "gridPos": {"h": 4, "w": 6, "x": 0, "y": 0},
          "targets": [
            {
              "expr": "count(kube_node_info)",
              "refId": "A"
            }
          ],
          "options": {
            "graphMode": "area",
            "colorMode": "value",
            "textMode": "value_and_name"
          },
          "fieldConfig": {
            "defaults": {
              "color": {"mode": "thresholds"},
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {"value": 0, "color": "red"},
                  {"value": 1, "color": "yellow"},
                  {"value": 3, "color": "green"}
                ]
              },
              "unit": "short"
            }
          }
        },
        {
          "id": 2,
          "title": "Running Pods",
          "type": "stat",
          "datasource": {"type": "prometheus", "uid": "prometheus"},
          "gridPos": {"h": 4, "w": 6, "x": 6, "y": 0},
          "targets": [
            {
              "expr": "sum(kube_pod_status_phase{phase=\"Running\"})",
              "refId": "A"
            }
          ],
          "options": {
            "graphMode": "area",
            "colorMode": "value",
            "textMode": "value_and_name"
          },
          "fieldConfig": {
            "defaults": {
              "color": {"mode": "palette-classic"},
              "unit": "short"
            }
          }
        },
        {
          "id": 3,
          "title": "Total Pods",
          "type": "stat",
          "datasource": {"type": "prometheus", "uid": "prometheus"},
          "gridPos": {"h": 4, "w": 6, "x": 12, "y": 0},
          "targets": [
            {
              "expr": "count(kube_pod_info)",
              "refId": "A"
            }
          ],
          "options": {
            "graphMode": "area",
            "colorMode": "value",
            "textMode": "value_and_name"
          },
          "fieldConfig": {
            "defaults": {
              "color": {"mode": "palette-classic"},
              "unit": "short"
            }
          }
        },
        {
          "id": 4,
          "title": "Failed Pods",
          "type": "stat",
          "datasource": {"type": "prometheus", "uid": "prometheus"},
          "gridPos": {"h": 4, "w": 6, "x": 18, "y": 0},
          "targets": [
            {
              "expr": "sum(kube_pod_status_phase{phase=\"Failed\"})",
              "refId": "A"
            }
          ],
          "options": {
            "graphMode": "area",
            "colorMode": "value",
            "textMode": "value_and_name"
          },
          "fieldConfig": {
            "defaults": {
              "color": {"mode": "thresholds"},
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {"value": 0, "color": "green"},
                  {"value": 1, "color": "yellow"},
                  {"value": 5, "color": "red"}
                ]
              },
              "unit": "short"
            }
          }
        },
        {
          "id": 18,
          "title": "Number of Spice Runner Pods over Time",
          "type": "timeseries",
          "datasource": {"type": "prometheus", "uid": "prometheus"},
          "gridPos": {"h": 8, "w": 24, "x": 0, "y": 4},
          "targets": [
            {
              "expr": "sum(kube_pod_status_phase{pod=~\"spice-runner.*\", phase=\"Running\"})",
              "refId": "A",
              "legendFormat": "Running Pods"
            }
          ],
          "fieldConfig": {
            "defaults": {
              "color": {"mode": "palette-classic"},
              "custom": {
                "drawStyle": "line",
                "lineInterpolation": "smooth",
                "lineWidth": 2,
                "fillOpacity": 20,
                "showPoints": "auto",
                "spanNulls": false
              },
              "unit": "short",
              "min": 0
            }
          },
          "options": {
            "legend": {
              "displayMode": "list",
              "placement": "bottom",
              "calcs": []
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          }
        },
        {
          "id": 5,
          "title": "Cluster CPU Usage",
          "type": "timeseries",
          "datasource": {"type": "prometheus", "uid": "prometheus"},
          "gridPos": {"h": 8, "w": 12, "x": 0, "y": 12},
          "targets": [
            {
              "expr": "sum(rate(container_cpu_usage_seconds_total{container!=\"\"}[5m])) by (node)",
              "refId": "A",
              "legendFormat": "{{node}}"
            }
          ],
          "fieldConfig": {
            "defaults": {
              "color": {"mode": "palette-classic"},
              "custom": {
                "drawStyle": "line",
                "lineInterpolation": "smooth",
                "fillOpacity": 20,
                "stacking": {"mode": "normal"}
              },
              "unit": "short"
            }
          }
        },
        {
          "id": 6,
          "title": "Cluster Memory Usage",
          "type": "timeseries",
          "datasource": {"type": "prometheus", "uid": "prometheus"},
          "gridPos": {"h": 8, "w": 12, "x": 12, "y": 12},
          "targets": [
            {
              "expr": "sum(container_memory_working_set_bytes{container!=\"\"}) by (node)",
              "refId": "A",
              "legendFormat": "{{node}}"
            }
          ],
          "fieldConfig": {
            "defaults": {
              "color": {"mode": "palette-classic"},
              "custom": {
                "drawStyle": "line",
                "lineInterpolation": "smooth",
                "fillOpacity": 20,
                "stacking": {"mode": "normal"}
              },
              "unit": "bytes"
            }
          }
        },
        {
          "id": 7,
          "title": "CPU Usage by Namespace",
          "type": "timeseries",
          "datasource": {"type": "prometheus", "uid": "prometheus"},
          "gridPos": {"h": 8, "w": 12, "x": 0, "y": 20},
          "targets": [
            {
              "expr": "sum(rate(container_cpu_usage_seconds_total{container!=\"\"}[5m])) by (namespace)",
              "refId": "A",
              "legendFormat": "{{namespace}}"
            }
          ],
          "fieldConfig": {
            "defaults": {
              "color": {"mode": "palette-classic"},
              "custom": {
                "drawStyle": "line",
                "lineInterpolation": "smooth",
                "fillOpacity": 10
              },
              "unit": "short"
            }
          }
        },
        {
          "id": 8,
          "title": "Memory Usage by Namespace",
          "type": "timeseries",
          "datasource": {"type": "prometheus", "uid": "prometheus"},
          "gridPos": {"h": 8, "w": 12, "x": 12, "y": 20},
          "targets": [
            {
              "expr": "sum(container_memory_working_set_bytes{container!=\"\"}) by (namespace)",
              "refId": "A",
              "legendFormat": "{{namespace}}"
            }
          ],
          "fieldConfig": {
            "defaults": {
              "color": {"mode": "palette-classic"},
              "custom": {
                "drawStyle": "line",
                "lineInterpolation": "smooth",
                "fillOpacity": 10
              },
              "unit": "bytes"
            }
          }
        },
        {
          "id": 9,
          "title": "Pod Status by Namespace",
          "type": "table",
          "datasource": {"type": "prometheus", "uid": "prometheus"},
          "gridPos": {"h": 8, "w": 12, "x": 0, "y": 28},
          "targets": [
            {
              "expr": "sum(kube_pod_status_phase) by (namespace, phase)",
              "refId": "A",
              "format": "table",
              "instant": true
            }
          ],
          "transformations": [
            {
              "id": "organize",
              "options": {
                "excludeByName": {
                  "Time": true
                },
                "indexByName": {},
                "renameByName": {
                  "namespace": "Namespace",
                  "phase": "Phase",
                  "Value": "Count"
                }
              }
            }
          ],
          "fieldConfig": {
            "defaults": {
              "color": {"mode": "thresholds"},
              "custom": {
                "align": "auto",
                "displayMode": "auto"
              }
            }
          }
        },
        {
          "id": 10,
          "title": "Node Status",
          "type": "table",
          "datasource": {"type": "prometheus", "uid": "prometheus"},
          "gridPos": {"h": 8, "w": 12, "x": 12, "y": 28},
          "targets": [
            {
              "expr": "kube_node_info",
              "refId": "A",
              "format": "table",
              "instant": true
            }
          ],
          "transformations": [
            {
              "id": "organize",
              "options": {
                "excludeByName": {
                  "Time": true,
                  "__name__": true,
                  "job": true,
                  "Value": true
                },
                "indexByName": {},
                "renameByName": {
                  "node": "Node",
                  "kernel_version": "Kernel",
                  "kubelet_version": "Kubelet Version",
                  "container_runtime_version": "Runtime"
                }
              }
            }
          ],
          "fieldConfig": {
            "defaults": {
              "color": {"mode": "thresholds"},
              "custom": {
                "align": "auto",
                "displayMode": "auto"
              }
            }
          }
        },
        {
          "id": 11,
          "title": "Deployments",
          "type": "stat",
          "datasource": {"type": "prometheus", "uid": "prometheus"},
          "gridPos": {"h": 4, "w": 6, "x": 0, "y": 36},
          "targets": [
            {
              "expr": "count(kube_deployment_created)",
              "refId": "A"
            }
          ],
          "options": {
            "graphMode": "area",
            "colorMode": "value",
            "textMode": "value_and_name"
          },
          "fieldConfig": {
            "defaults": {
              "color": {"mode": "palette-classic"},
              "unit": "short"
            }
          }
        },
        {
          "id": 12,
          "title": "StatefulSets",
          "type": "stat",
          "datasource": {"type": "prometheus", "uid": "prometheus"},
          "gridPos": {"h": 4, "w": 6, "x": 6, "y": 36},
          "targets": [
            {
              "expr": "count(kube_statefulset_created)",
              "refId": "A"
            }
          ],
          "options": {
            "graphMode": "area",
            "colorMode": "value",
            "textMode": "value_and_name"
          },
          "fieldConfig": {
            "defaults": {
              "color": {"mode": "palette-classic"},
              "unit": "short"
            }
          }
        },
        {
          "id": 13,
          "title": "DaemonSets",
          "type": "stat",
          "datasource": {"type": "prometheus", "uid": "prometheus"},
          "gridPos": {"h": 4, "w": 6, "x": 12, "y": 36},
          "targets": [
            {
              "expr": "count(kube_daemonset_created)",
              "refId": "A"
            }
          ],
          "options": {
            "graphMode": "area",
            "colorMode": "value",
            "textMode": "value_and_name"
          },
          "fieldConfig": {
            "defaults": {
              "color": {"mode": "palette-classic"},
              "unit": "short"
            }
          }
        },
        {
          "id": 14,
          "title": "Services",
          "type": "stat",
          "datasource": {"type": "prometheus", "uid": "prometheus"},
          "gridPos": {"h": 4, "w": 6, "x": 18, "y": 36},
          "targets": [
            {
              "expr": "count(kube_service_info)",
              "refId": "A"
            }
          ],
          "options": {
            "graphMode": "area",
            "colorMode": "value",
            "textMode": "value_and_name"
          },
          "fieldConfig": {
            "defaults": {
              "color": {"mode": "palette-classic"},
              "unit": "short"
            }
          }
        },
        {
          "id": 15,
          "title": "Network I/O by Pod",
          "type": "timeseries",
          "datasource": {"type": "prometheus", "uid": "prometheus"},
          "gridPos": {"h": 8, "w": 24, "x": 0, "y": 40},
          "targets": [
            {
              "expr": "sum(rate(container_network_receive_bytes_total[5m])) by (pod)",
              "refId": "A",
              "legendFormat": "RX - {{pod}}"
            },
            {
              "expr": "sum(rate(container_network_transmit_bytes_total[5m])) by (pod)",
              "refId": "B",
              "legendFormat": "TX - {{pod}}"
            }
          ],
          "fieldConfig": {
            "defaults": {
              "color": {"mode": "palette-classic"},
              "custom": {
                "drawStyle": "line",
                "lineInterpolation": "smooth",
                "fillOpacity": 10
              },
              "unit": "Bps"
            }
          }
        },
        {
          "id": 16,
          "title": "Persistent Volume Claims",
          "type": "table",
          "datasource": {"type": "prometheus", "uid": "prometheus"},
          "gridPos": {"h": 8, "w": 12, "x": 0, "y": 48},
          "targets": [
            {
              "expr": "kube_persistentvolumeclaim_info",
              "refId": "A",
              "format": "table",
              "instant": true
            }
          ],
          "transformations": [
            {
              "id": "organize",
              "options": {
                "excludeByName": {
                  "Time": true,
                  "__name__": true,
                  "job": true,
                  "Value": true
                },
                "indexByName": {},
                "renameByName": {
                  "namespace": "Namespace",
                  "persistentvolumeclaim": "PVC",
                  "storageclass": "Storage Class"
                }
              }
            }
          ],
          "fieldConfig": {
            "defaults": {
              "color": {"mode": "thresholds"},
              "custom": {
                "align": "auto",
                "displayMode": "auto"
              }
            }
          }
        },
        {
          "id": 17,
          "title": "Container Restarts",
          "type": "timeseries",
          "datasource": {"type": "prometheus", "uid": "prometheus"},
          "gridPos": {"h": 8, "w": 12, "x": 12, "y": 48},
          "targets": [
            {
              "expr": "sum(increase(kube_pod_container_status_restarts_total[1h])) by (namespace, pod)",
              "refId": "A",
              "legendFormat": "{{namespace}}/{{pod}}"
            }
          ],
          "fieldConfig": {
            "defaults": {
              "color": {"mode": "palette-classic"},
              "custom": {
                "drawStyle": "line",
                "lineInterpolation": "smooth",
                "fillOpacity": 10
              },
              "unit": "short"
            }
          }
        }
      ]
    }

