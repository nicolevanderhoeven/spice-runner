apiVersion: apps/v1
kind: Deployment
metadata:
  name: spice-runner
  namespace: default
  labels:
    app: spice-runner
    component: frontend
spec:
  # replicas managed by HPA (see k8s/hpa.yaml)
  selector:
    matchLabels:
      app: spice-runner
  template:
    metadata:
      labels:
        app: spice-runner
        component: frontend
    spec:
      containers:
      # Main application container (Nginx + Game)
      - name: spice-runner
        image: gcr.io/dev-advocacy-380120/spice-runner:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /spice/
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /spice/
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 20
        volumeMounts:
        - name: nginx-logs
          mountPath: /var/log/nginx
        resources:
          requests:
            memory: "64Mi"
            cpu: "20m"  # Lowered for easier HPA demo (70% = 14m trigger point)
          limits:
            memory: "128Mi"
            cpu: "200m"
      
      # Alloy sidecar for observability
      - name: alloy
        image: grafana/alloy:latest
        imagePullPolicy: IfNotPresent
        args:
          - run
          - /etc/alloy/config.alloy
          - --storage.path=/var/lib/alloy/data
          - --server.http.listen-addr=0.0.0.0:12345
          - --stability.level=public-preview
        ports:
        - name: http
          containerPort: 12345
          protocol: TCP
        - name: otlp-grpc
          containerPort: 4317
          protocol: TCP
        - name: otlp-http
          containerPort: 4318
          protocol: TCP
        env:
        # Point to in-cluster services
        - name: PROMETHEUS_REMOTE_WRITE_URL
          value: "http://prometheus.observability.svc.cluster.local:9090/api/v1/write"
        - name: LOKI_URL
          value: "http://loki.observability.svc.cluster.local:3100/loki/api/v1/push"
        - name: TEMPO_ENDPOINT
          value: "tempo.observability.svc.cluster.local:4317"
        # Pod metadata
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        volumeMounts:
        - name: alloy-config
          mountPath: /etc/alloy
        - name: alloy-data
          mountPath: /var/lib/alloy/data
        - name: nginx-logs
          mountPath: /var/log/nginx
          readOnly: true
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 12345
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 12345
          initialDelaySeconds: 5
          periodSeconds: 5
      
      volumes:
      # Shared volume for nginx logs
      - name: nginx-logs
        emptyDir: {}
      # Alloy configuration
      - name: alloy-config
        configMap:
          name: alloy-cloud-config
      # Alloy data storage
      - name: alloy-data
        emptyDir: {}
---
# Alloy ConfigMap for in-cluster stack
apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-cloud-config
  namespace: default
data:
  config.alloy: |
    // Grafana Alloy Configuration for In-Cluster Stack
    
    // ============================================================================
    // Faro Receiver - Accept Grafana Faro RUM data from frontend
    // ============================================================================
    
    faro.receiver "frontend" {
      server {
        listen_address = "0.0.0.0"
        listen_port    = 12347
        cors_allowed_origins = ["*"]
      }
      
      output {
        logs   = [loki.process.faro_logs.receiver]
        traces = [otelcol.processor.batch.faro_traces.input]
      }
    }
    
    // Process Faro logs to add proper labels
    loki.process "faro_logs" {
      stage.logfmt {
        mapping = {
          kind = "kind",
          event_name = "event_name",
        }
      }
      
      stage.labels {
        values = {
          kind = "kind",
          event_name = "event_name",
        }
      }
      
      stage.static_labels {
        values = {
          job = "faro",
          service = "spice-runner-frontend",
          namespace = env("KUBERNETES_NAMESPACE"),
          pod = env("POD_NAME"),
        }
      }
      
      forward_to = [loki.write.default.receiver]
    }
    
    // Batch processor for Faro traces
    otelcol.processor.batch "faro_traces" {
      timeout = "5s"
      send_batch_size = 100
      
      output {
        traces = [otelcol.exporter.otlp.tempo.input]
      }
    }
    
    // ============================================================================
    // OTLP Receivers - Accept traces and metrics from frontend
    // ============================================================================
    
    otelcol.receiver.otlp "frontend" {
      http {
        endpoint = "0.0.0.0:4318"
        cors {
          allowed_origins = ["*"]
          allowed_headers = ["*"]
        }
      }
      
      grpc {
        endpoint = "0.0.0.0:4317"
      }
      
      output {
        metrics = [otelcol.processor.batch.default.input]
        traces  = [otelcol.processor.batch.default.input]
      }
    }
    
    // ============================================================================
    // OTLP Processors
    // ============================================================================
    
    otelcol.processor.batch "default" {
      timeout = "5s"
      send_batch_size = 100
      
      output {
        metrics = [otelcol.processor.attributes.add_labels.input]
        traces  = [otelcol.processor.attributes.add_labels.input]
      }
    }
    
    otelcol.processor.attributes "add_labels" {
      action {
        key = "deployment.environment"
        value = "production"
        action = "upsert"
      }
      
      action {
        key = "service.namespace"
        value = "spice-runner"
        action = "upsert"
      }
      
      action {
        key = "k8s.pod.name"
        value = env("POD_NAME")
        action = "upsert"
      }
      
      action {
        key = "k8s.pod.uid"
        value = env("POD_UID")
        action = "upsert"
      }
      
      output {
        metrics = [otelcol.exporter.prometheus.default.input]
        traces  = [otelcol.exporter.otlp.tempo.input]
      }
    }
    
    // ============================================================================
    // OTLP Exporters
    // ============================================================================
    
    otelcol.exporter.prometheus "default" {
      forward_to = [prometheus.remote_write.default.receiver]
    }
    
    otelcol.exporter.otlp "tempo" {
      client {
        endpoint = env("TEMPO_ENDPOINT")
        tls {
          insecure = true  // In-cluster, no TLS needed
        }
      }
    }
    
    // ============================================================================
    // Prometheus Remote Write
    // ============================================================================
    
    prometheus.remote_write "default" {
      endpoint {
        url = env("PROMETHEUS_REMOTE_WRITE_URL")
      }
    }
    
    // ============================================================================
    // Nginx Log Collection
    // ============================================================================
    
    local.file_match "nginx_logs" {
      path_targets = [{
        __path__ = "/var/log/nginx/access.log",
        job = "nginx",
        service = "spice-runner-nginx",
        pod = env("POD_NAME"),
      }]
    }
    
    loki.source.file "nginx_access" {
      targets    = local.file_match.nginx_logs.targets
      forward_to = [loki.process.nginx_json.receiver]
    }
    
    loki.process "nginx_json" {
      stage.json {
        expressions = {
          remote_addr = "remote_addr",
          request = "request",
          status = "status",
          body_bytes_sent = "body_bytes_sent",
          request_time = "request_time",
          http_user_agent = "http_user_agent",
          http_referrer = "http_referrer",
        }
      }
      
      stage.labels {
        values = {
          status = "status",
        }
      }
      
      stage.static_labels {
        values = {
          job = "nginx",
          service = "spice-runner-nginx",
          log_type = "access",
          pod = env("POD_NAME"),
          namespace = env("KUBERNETES_NAMESPACE"),
        }
      }
      
      forward_to = [loki.write.default.receiver]
    }
    
    // ============================================================================
    // Nginx Error Logs
    // ============================================================================
    
    local.file_match "nginx_error_logs" {
      path_targets = [{
        __path__ = "/var/log/nginx/error.log",
        job = "nginx",
        service = "spice-runner-nginx",
        pod = env("POD_NAME"),
      }]
    }
    
    loki.source.file "nginx_error" {
      targets    = local.file_match.nginx_error_logs.targets
      forward_to = [loki.process.nginx_error.receiver]
    }
    
    loki.process "nginx_error" {
      stage.regex {
        expression = "^(?P<timestamp>\\d{4}/\\d{2}/\\d{2} \\d{2}:\\d{2}:\\d{2}) \\[(?P<level>\\w+)\\] (?P<message>.*)"
      }
      
      stage.labels {
        values = {
          level = "level",
        }
      }
      
      stage.static_labels {
        values = {
          job = "nginx",
          service = "spice-runner-nginx",
          log_type = "error",
          pod = env("POD_NAME"),
          namespace = env("KUBERNETES_NAMESPACE"),
        }
      }
      
      forward_to = [loki.write.default.receiver]
    }
    
    // ============================================================================
    // Loki Write
    // ============================================================================
    
    loki.write "default" {
      endpoint {
        url = env("LOKI_URL")
      }
    }
    
    // ============================================================================
    // Self-Monitoring
    // ============================================================================
    
    prometheus.exporter.self "alloy" { }
    
    prometheus.scrape "alloy" {
      targets = prometheus.exporter.self.alloy.targets
      forward_to = [prometheus.relabel.alloy.receiver]
      scrape_interval = "15s"
    }
    
    prometheus.relabel "alloy" {
      rule {
        target_label = "job"
        replacement  = "alloy"
      }
      
      rule {
        target_label = "service"
        replacement  = "spice-runner-alloy-sidecar"
      }
      
      rule {
        target_label = "pod"
        replacement  = env("POD_NAME")
      }
      
      forward_to = [prometheus.remote_write.default.receiver]
    }

